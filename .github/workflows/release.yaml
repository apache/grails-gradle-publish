# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Release"
on:
  release:
    types: [ published ]
permissions: { }
env:
  GRAILS_PUBLISH_RELEASE: 'true'
jobs:
  publish:
    name: "Stage Artifacts for Release"
    permissions:
      contents: write # to stage distributions to the GitHub release page
      issues: write # to modify milestones
    runs-on: ubuntu-24.04
    outputs:
      release_version: ${{ steps.release_version.outputs.value }}
      commit_hash: ${{ steps.commit_hash.outputs.value }}
      target_branch: ${{ steps.extract_branch.outputs.value }}
      extract_repository_name: ${{ steps.extract_repository_name.outputs.repository_name }}
    steps:
      - name: "üåê Output Agent IP" # in the event RAO blocks this agent, this can be used to debug it
        run: curl -s https://api.ipify.org
      - name: "üìù Extract repository name"
        id: extract_repository_name
        run: echo "repository_name=${GITHUB_REPOSITORY##*/}" >> $GITHUB_OUTPUT
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # This should not be needed as ${{ github.token }} is the default, but there have been issues with it.
          ref: ${{ github.ref }}
          fetch-depth: 1
          fetch-tags: true
      - name: "üìÖ Store common build date" # to ensure a reproducible build
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> "$GITHUB_ENV"
      - name: "üìÖ Ensure source files use common date"
        run: find . -depth \( -type f -o -type d \) -exec touch -d "@${SOURCE_DATE_EPOCH}" {} +
      - name: "üîê Set up GPG for signing"
        run: |
          echo "${{ secrets.GRAILS_GPG_KEY }}" | gpg --batch --import
          gpg --list-keys
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17.0.14 # this must be a specific version for reproducible builds
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRAILS_DEVELOCITY_ACCESS_KEY }}
      - name: "üìù Store the target branch"
        id: extract_branch
        run: |
          echo "Determining Target Branch"
          TARGET_BRANCH=`cat $GITHUB_EVENT_PATH | jq '.release.target_commitish' | sed -e 's/^"\(.*\)"$/\1/g'`
          echo $TARGET_BRANCH
          echo "value=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
      - name: "üìù Store the current release version"
        id: release_version
        run: echo "value=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
      - name: "‚öôÔ∏è Run pre-release"
        uses: apache/grails-github-actions/pre-release@asf
        env:
          RELEASE_VERSION: ${{ steps.release_version.outputs.value }}
      - name: "üìù Fetch release commit hash"
        id: commit_hash
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ steps.extract_repository_name.outputs.repository_name }}
          TAG: 'v${{ steps.release_version.outputs.value }}'
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ref_json=$(gh api "repos/$OWNER/$REPO/git/ref/tags/$TAG")
          type=$(jq -r '.object.type' <<<"$ref_json")
          sha=$(jq -r '.object.sha'  <<<"$ref_json")
          if [ "$type" = "tag" ]; then
            sha=$(gh api "repos/$OWNER/$REPO/git/tags/$sha" --jq '.object.sha')
          fi
          echo "Found Commit Sha: $sha"
          echo "value=$sha" >>"$GITHUB_OUTPUT"
      - name: "üß© Run Assemble"
        run: >
          ./gradlew assemble
          -PgithubBranch=${{ steps.extract_branch.outputs.value }}
      - name: "üì¶ Generate docs"
        run: >
          ./gradlew grails-publish:groovydoc
          -PgithubBranch=${{ steps.extract_branch.outputs.value }}
      - name: "‚ú® Create Staging Repository"
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_STAGE_DEPLOYER_USER }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_STAGE_DEPLOYER_PW }}
          NEXUS_PUBLISH_URL: 'https://repository.apache.org/service/local/'
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.STAGING_PROFILE_ID }}
          NEXUS_PUBLISH_DESCRIPTION: '${{ steps.extract_repository_name.outputs.repository_name }}:${{ steps.release_version.outputs.value }}'
          SIGNING_KEY: ${{ secrets.GPG_KEY_ID }}
        run: ./gradlew initializeSonatypeStagingRepository
      - name: "üì§ Publish"
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_STAGE_DEPLOYER_USER }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_STAGE_DEPLOYER_PW }}
          NEXUS_PUBLISH_URL: 'https://repository.apache.org/service/local/'
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.STAGING_PROFILE_ID }}
          NEXUS_PUBLISH_DESCRIPTION: '${{ steps.extract_repository_name.outputs.repository_name }}:${{ steps.release_version.outputs.value }}'
          SIGNING_KEY: ${{ secrets.GPG_KEY_ID }}
        run: >
          ./gradlew findSonatypeStagingRepository 
          publishToSonatype 
          aggregateChecksums
          aggregatePublishedArtifacts
          -x initializeSonatypeStagingRepository
      - name: "‚úÖ Close Staging Repository"
        env:
          NEXUS_PUBLISH_USERNAME: ${{ secrets.NEXUS_STAGE_DEPLOYER_USER }}
          NEXUS_PUBLISH_PASSWORD: ${{ secrets.NEXUS_STAGE_DEPLOYER_PW }}
          NEXUS_PUBLISH_URL: 'https://repository.apache.org/service/local/'
          NEXUS_PUBLISH_STAGING_PROFILE_ID: ${{ secrets.STAGING_PROFILE_ID }}
          NEXUS_PUBLISH_DESCRIPTION: '${{ steps.extract_repository_name.outputs.repository_name }}:${{ steps.release_version.outputs.value }}'
          SIGNING_KEY: ${{ secrets.GPG_KEY_ID }}
        run: >
          ./gradlew findSonatypeStagingRepository 
          closeSonatypeStagingRepository
          -x initializeSonatypeStagingRepository
      - name: "üìÖ Generate build date file"
        run: echo "$SOURCE_DATE_EPOCH" >> build/BUILD_DATE.txt
      - name: "üì§ Upload build date, checksums and published artifacts files"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/BUILD_DATE.txt
            build/CHECKSUMS.txt
            build/PUBLISHED_ARTIFACTS.txt
  source:
    name: "Create Source Distribution"
    needs: publish
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # This should not be needed as ${{ github.token }} is the default, but there have been issues with it.
          ref: v${{ needs.publish.outputs.release_version }}
          path: 'grails-publish'
      - name: "üóëÔ∏è Remove unnecessary files"
        run: |
          rm -f \
          grails-publish/gradle/wrapper/gradle-wrapper.jar \
          grails-publish/gradle/wrapper/gradle-wrapper.properties \
          grails-publish/gradlew.bat \
          grails-publish/gradlew
      - name: "üì• Download CHECKSUMS.txt and rename to CHECKSUMS"
        working-directory: 'grails-publish'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_url=$(gh release view v${{ needs.publish.outputs.release_version }} --json assets --repo ${{ github.repository }} --jq '.assets[] | select(.name == "CHECKSUMS.txt") | .url')
          curl -L -H "Authorization: token $GH_TOKEN" -o CHECKSUMS "$release_url"
      - name: "üì• Download PUBLISHED_ARTIFACTS.txt and rename to PUBLISHED_ARTIFACTS"
        working-directory: 'grails-publish'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_url=$(gh release view v${{ needs.publish.outputs.release_version }} --json assets --repo ${{ github.repository }} --jq '.assets[] | select(.name == "PUBLISHED_ARTIFACTS.txt") | .url')
          curl -L -H "Authorization: token $GH_TOKEN" -o PUBLISHED_ARTIFACTS "$release_url"
      - name: "üì• Download BUILD_DATE.txt and rename to BUILD_DATE"
        working-directory: 'grails-publish'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_url=$(gh release view v${{ needs.publish.outputs.release_version }} --json assets --repo ${{ github.repository }} --jq '.assets[] | select(.name == "BUILD_DATE.txt") | .url')
          curl -L -H "Authorization: token $GH_TOKEN" -o BUILD_DATE "$release_url"
      - name: "üìÖ Ensure source files use common date"
        run: |
          SOURCE_DATE_EPOCH=$(cat grails-publish/BUILD_DATE)
          find . -depth \( -type f -o -type d \) -exec touch -d "@${SOURCE_DATE_EPOCH}" {} +
      - name: "üì¶ Create source distribution ZIP"
        run: |
          zip -r \
          "apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip" \
          grails-publish \
          -x 'grails-publish/.git/*' \
          -x 'grails-publish/.github/*'
      - name: 'üîê Set up GPG for signing artifacts'
        run: |
          echo "${{ secrets.GRAILS_GPG_KEY }}" | gpg --batch --import
          gpg --list-keys
      - name: "üîè Sign source distribution ZIP"
        run: |
          gpg \
          --default-key "${{ secrets.GPG_KEY_ID }}" \
          --batch \
          --yes \
          --pinentry-mode loopback \
          --armor \
          --detach-sign apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip
      - name: "üì¶ Create source distribution checksum"
        run: |
          sha512sum "apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip" \
          > "apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip.sha512"
      - name: "üöÄ Upload ZIP and Signature to GitHub Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.publish.outputs.release_version }}
          files: |
            apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip
            apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip.asc
            apache-grails-publish-${{ needs.publish.outputs.release_version }}-incubating-src.zip.sha512
      - name: "üóëÔ∏è Remove CHECKSUMS.txt asset from release"
        working-directory: 'grails-publish'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          gh release delete-asset \
          v${{ needs.publish.outputs.release_version }} \
          CHECKSUMS.txt \
          --repo ${{ github.repository }} \
          --yes
      - name: "üóëÔ∏è Remove BUILD_DATE.txt asset from release"
        working-directory: 'grails-publish'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          gh release delete-asset \
          v${{ needs.publish.outputs.release_version }} \
          BUILD_DATE.txt \
          --repo ${{ github.repository }} \
          --yes
      - name: "üóëÔ∏è Remove PUBLISHED_ARTIFACTS.txt asset from release"
        working-directory: 'grails-publish'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          gh release delete-asset \
          v${{ needs.publish.outputs.release_version }} \
          PUBLISHED_ARTIFACTS.txt \
          --repo ${{ github.repository }} \
          --yes
  upload:
    name: "Upload Source Distribution"
    needs: [ publish, source ]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      SVN_USERNAME: ${{ secrets.SVC_DIST_GRAILS_USERNAME }}
      SVN_PASSWORD: ${{ secrets.SVC_DIST_GRAILS_PASSWORD }}
    steps:
      - name: "üåê Output Agent IP" # in the event RAO blocks this agent, this can be used to debug it
        run: curl -s https://api.ipify.org
      - name: "‚öôÔ∏è Setup SVN and Tools"
        run: sudo apt-get install -y subversion subversion-tools tree gettext-base
      - name: "üëÄ Ensure grails dev folder exists"
        run: |
          set -e
          if svn ls https://dist.apache.org/repos/dist/dev/incubator/grails --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive; then
            echo "Dev Folder 'grails' already exists ‚Äî skipping creation"
          else
            echo "Dev Folder 'grails' does not exist, creating"
            svnmucc --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive \
              mkdir https://dist.apache.org/repos/dist/dev/incubator/grails \
              -m "Create 'grails' dev folder"
          fi
      - name: "üëÄ Ensure grails publish folder exists"
        run: |
          set -e
          if svn ls https://dist.apache.org/repos/dist/dev/incubator/grails/grails-publish --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive; then
            echo "Dev Folder 'grails/grails-publish' already exists ‚Äî skipping creation"
          else
            echo "Dev Folder 'grails/grails-publish' does not exist, creating"
            svnmucc --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive \
              mkdir https://dist.apache.org/repos/dist/dev/incubator/grails/grails-publish \
              -m "Create 'grails-publish' dev folder"
          fi
      - name: "üì• Checkout dev repo"
        run: |
          svn checkout --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive https://dist.apache.org/repos/dist/dev/incubator/grails/grails-publish dev-repo
      - name: "üóëÔ∏è Remove existing dev version"
        run: |
          export VERSION="${{ needs.publish.outputs.release_version }}"
          cd dev-repo
          if [ -d "$VERSION" ]; then
            svn delete "$VERSION"
            svn commit -m "Remove grails-publish dev version $VERSION" --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive
          else
            echo "No existing dev version $VERSION to remove"
          fi
      - name: "üì• Fetch source distributions"
        run: |
          export TAG="v${{ needs.publish.outputs.release_version }}"
          export VERSION="${{ needs.publish.outputs.release_version }}"
          cd dev-repo
          mkdir -p $VERSION/sources          
          cd $VERSION/sources
          curl -LO https://github.com/apache/grails-core/releases/download/$TAG/apache-grails-publish-$VERSION-incubating-src.zip
          curl -LO https://github.com/apache/grails-core/releases/download/$TAG/apache-grails-publish-$VERSION-incubating-src.zip.sha512
          curl -LO https://github.com/apache/grails-core/releases/download/$TAG/apache-grails-publish-$VERSION-incubating-src.zip.asc
          echo "Downloaded the following files:"
          ls -l
      - name: "üíæ Store Distribution SVN revision in a file"
        run: |
          export VERSION="${{ needs.publish.outputs.release_version }}"
          cd dev-repo
          svn info $VERSION > "DIST_SVN_REVISION.txt"
      - name: "üì§ Upload the Distribution SVN revision file"
        uses: softprops/action-gh-release@v2
        with:
          files: dev-repo/DIST_SVN_REVISION.txt
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # This should not be needed as ${{ github.token }} is the default, but there have been issues with it.
          ref: v${{ needs.publish.outputs.release_version }}
          path: 'grails-publish'
      - name: "üìß Print Grails Vote Email"
        env:
          VERSION: ${{ needs.publish.outputs.release_version }}
          VERSION_COMMIT_ID: ${{ needs.publish.outputs.commit_hash }}
        run: |
          export DIST_SVN_REVISION=$(awk '/Last Changed Rev:/ {print $4}' dev-repo/DIST_SVN_REVISION.txt)
          
          echo "*************************************************"
          echo "Subject: [VOTE] Release Apache Grails (incubating) - Gradle Plugin - Grails Publish ${VERSION}"
          echo "*************************************************"
          echo "Body:"
          echo "*************************************************"
          cat grails-publish/.github/vote_templates/staged.txt | envsubst
          echo "*************************************************"
      - name: 'üìß Print Groovy Vote Email'
        env:
          VERSION: ${{ needs.publish.outputs.release_version }}
          VERSION_COMMIT_ID: ${{ needs.publish.outputs.commit_hash }}
        run: |
          export DIST_SVN_REVISION=$(awk '/Last Changed Rev:/ {print $4}' dev-repo/DIST_SVN_REVISION.txt)
          
          echo "*************************************************"
          echo "Subject: [VOTE] Approval of Apache Grails (incubating) - Gradle Plugin - Grails Publish ${VERSION} release by Groovy PMC"
          echo "*************************************************"
          echo "Body:"
          echo "*************************************************"
          cat grails-publish/.github/vote_templates/groovy_pmc.txt | envsubst
          echo "*************************************************"
      - name: 'Announcement Email'
        env:
          VERSION: ${{ needs.publish.outputs.release_version }}
          VERSION_COMMIT_ID: ${{ needs.publish.outputs.commit_hash }}
          PREVIOUS_VERSION: 'TODO_PREVIOUS_VERSION'
        run: |
          export DIST_SVN_REVISION=$(awk '/Last Changed Rev:/ {print $4}' dev-repo/DIST_SVN_REVISION.txt)
          
          echo "*************************************************"
          echo "Subject: [ANNOUNCE] Apache Grails (incubating) - Gradle Plugin - Grails Publish ${VERSION}"
          echo "*************************************************"
          echo "Body:"
          echo "*************************************************"
          cat grails-publish/.github/vote_templates/announce.txt | envsubst
          echo "*************************************************"
  docs:
    environment: docs
    name: "Publish Documentation"
    needs: [ publish, source, upload ]
    runs-on: ubuntu-24.04
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # This should not be needed as ${{ github.token }} is the default, but there have been issues with it.
          fetch-depth: 0 # need the full history to find all tags
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "üìÖ Ensure Common Build Date" # to ensure a reproducible build
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> "$GITHUB_ENV"
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: liberica
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRAILS_DEVELOCITY_ACCESS_KEY }}
      - name: "üìñ Generate Documentation"
        run: >
          ./gradlew grails-publish:groovydoc
          -PgithubBranch=${{ needs.publish.outputs.target_branch }}
      - name: "üöÄ Publish to Github Pages"
        uses: apache/grails-github-actions/deploy-github-pages@asf
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GRADLE_PUBLISH_RELEASE: 'true'
          SOURCE_FOLDER: plugin/build/docs/api
          VERSION: ${{ needs.publish.outputs.release_version }}
  release:
    name: "Close Release"
    environment: release
    needs: [ publish, source, upload, docs ]
    runs-on: ubuntu-24.04
    permissions:
      contents: write # required for gradle.properties revert
      issues: write # required for milestone closing
      pull-requests: write # to open PR
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # This should not be needed as ${{ github.token }} is the default, but there have been issues with it.
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "üìÖ Ensure Common Build Date" # to ensure a reproducible build
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> "$GITHUB_ENV"
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: 17
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRAILS_DEVELOCITY_ACCESS_KEY }}
      - name: "‚öôÔ∏è Run post-release"
        uses: apache/grails-github-actions/post-release@asf
