/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

ext.set('signing.keyId', findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY'))
ext.set('signing.password', findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE'))
ext.set('signing.secretKeyRingFile', findProperty('signing.secretKeyRingFile') ?: "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")

if (isReleaseVersion) {
    apply plugin: 'signing'

    afterEvaluate {
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
            useGpgCmd()

            Publication[] publications = new Publication[publishing.publications.size()]
            publishing.publications.findAll().toArray(publications)
            sign(publications)
        }
    }

    tasks.withType(Sign).configureEach {
        onlyIf { isReleaseVersion }
    }

    project.rootProject.tasks.withType(InitializeNexusStagingRepository).configureEach { InitializeNexusStagingRepository task ->
        task.shouldRunAfter = project.tasks.withType(Sign)
    }
}
