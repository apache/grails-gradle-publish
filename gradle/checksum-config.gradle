/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
import org.gradle.crypto.checksum.Checksum

apply plugin: 'org.gradle.crypto.checksum'

afterEvaluate {
    if (plugins.hasPlugin('signing')) {
        if (System.getenv('TEST_BUILD_REPRODUCIBLE')) {
            logger.lifecycle('Signing is disabled for this build to test build reproducibility.')
            tasks.withType(Sign).configureEach {
                enabled = false
            }
        }
    }

    if (plugins.hasPlugin('maven-publish')) {
        def checksumTask = tasks.register('publishedChecksums', Checksum)
        checksumTask.configure { Checksum check ->
            check.group = 'publishing'
            check.checksumAlgorithm = Checksum.Algorithm.SHA512
            check.outputDirectory = layout.buildDirectory.dir('checksums')
            check.dependsOn(tasks.withType(Jar))
        }

        def artifactsDir = layout.buildDirectory.dir('artifacts')
        def artifactsTask = tasks.register('savePublishedArtifacts')
        artifactsTask.configure {
            it.group = 'publishing'
            it.outputs.dir(artifactsDir)
            it.dependsOn(tasks.withType(Jar))
        }

        gradle.taskGraph.whenReady {
            List filesToChecksum = []
            extensions.configure(PublishingExtension) {
                it.publications.withType(MavenPublication).configureEach {
                    artifacts.each {
                        if (it.file.name == 'grails-plugin.xml') {
                            return
                        }
                        filesToChecksum << it.file
                    }
                }
            }

            checksumTask.configure { Checksum check ->
                check.inputFiles.setFrom(filesToChecksum.unique())
                check.finalizedBy(artifactsTask)
            }

            artifactsTask.configure {
                // Explicit `project` is required for `extensions` as `Task it` is the delegate
                def publicationContainer = project.extensions.findByType(PublishingExtension).publications
                doLast {
                    Map<String, String> artifacts = [:]
                    publicationContainer.withType(MavenPublication).each { MavenPublication publication ->
                        publication.artifacts.each { MavenArtifact artifact ->
                            if (!artifact.file.exists() || artifact.file.name in ['grails-plugin.xml', 'profile.yml']) {
                                return
                            }
                            if (artifact.classifier) {
                                artifacts[artifact.file.name] = "$publication.groupId:$publication.artifactId:$publication.version:$artifact.classifier" as String
                            } else {
                                artifacts[artifact.file.name] = "$publication.groupId:$publication.artifactId:$publication.version" as String
                            }
                        }
                    }
                    File artifactsFile = artifactsDir.get().asFile
                    artifactsFile.mkdirs()
                    artifacts.each { key, value ->
                        new File(artifactsFile, "${key}.txt").text = value
                    }
                }
            }
        }

        def publishTasks = tasks.names.findAll { it.startsWith('publishMavenPublication') }
        publishTasks.each { taskName ->
            tasks.named(taskName).configure { publishTask ->
                publishTask.finalizedBy(checksumTask)
            }
        }
    }
}